<pre class="metadata">
Title: Idle Detection API
Status: w3c/CG-DRAFT
ED: https://wicg.github.io/idle-detection/
Shortname: idle-detection
Level: 1
Editor: Reilly Grant 83788, Google LLC https://www.google.com, reillyg@google.com
Abstract: This document defines a web platform API for observing system-wide user presence signals.
Group: wicg
Repository: https://github.com/WICG/idle-detection/
Favicon: logo-idle.png
Markup Shorthands: css no, markdown yes
</pre>

<pre class="anchors">
spec: ECMAScript; urlPrefix: https://tc39.github.io/ecma262/#
    type: dfn
        text: internal slot; url: sec-object-internal-methods-and-internal-slots
spec: page-visibility-2; urlPrefix: https://www.w3.org/TR/page-visibility-2/#
    for: Document
        type: attribute
            text: hidden; url: dom-document-hidden
            text: onvisibilitychange; url:dom-document-onvisibilitychange
</pre>

<pre class="link-defaults">
spec:html; type:event; text:change
spec:infra; type:dfn; text:user agent
spec:service-workers; type:dfn; for:/; text:service worker
spec:webidl; type:dfn; text:resolve

</pre>

<style>
  table {
    border-collapse: collapse;
    border-left-style: hidden;
    border-right-style: hidden;
    text-align: left;
  }
  table td, table th {
    border: 1px solid black;
    padding: 3px;
  }
</style>

# Introduction # {#introduction}

*This section is non-normative.*

Using existing capabilities a page is able to determine when it is currently
visible to the user (using the {{Document/hidden}} property and
{{Document/onvisibilitychange}} event). It is also possible to know when the
user has recently interacted with the page by observing
{{GlobalEventHandlers/onmousemove}}, {{GlobalEventHandlers/onkeypress}}, and
other events triggered by user input. While sufficiently reflecting user
engagement with a particular page these events give an incomplete picture of
whether the user is still present at their device. For example, if
{{Document/hidden}} is `true`, then the device screensaver may have activated,
or the user could have switched to a different application. If it is `false` but
there have been no recent input events, then the user could have left their
computer to grab a cup of coffee, or they could be editing a document in another
window side-by-side with the page.

Making these distinctions is important for applications which have the option of
delivering notifications across multiple devices, such as a desktop and
smartphone. Users may find it frustrating when notifications are delivered to
the wrong device or are disruptive. For example, if they switch from a tab
containing a messaging application to one for a document they are editing, the
messaging application, not being able to observe that the user is still
interacting with their device, may assume that they have left to grab a coffee
and start delivering notifications to their phone, causing it to buzz
distractingly, instead of displaying notifications on their desktop or
incrementing a badge count.

## Alternatives Considered ## {#alternatives-considered}

An alternative design would protect this information by allowing a notification
to be marked as "hide on active" or "hide on idle" and not allowing the page to
observe whether or not the notification was actually shown. The problem with
this approach is that the intelligent notification routing described previously
requires observing these signals of user presence and making centralized
decisions based on the state of all of the user's devices.

For example, to route notifications to a user's mobile device when they get up
to grab a coffee the messaging application could detect that it is no longer
visible and start sending push messages to the mobile device while marking the
desktop notifications as "hide on active". If the user were still at their desk
but using a different application then they would start getting the distracting
notifications from their mobile device this proposal is attempting to avoid
whether or not the desktop is able to successfully suppress them. Successful
suppression of duplicate and disruptive notification requires multi-device
coordination.

Allowing notifications to be hidden also breaks implementor mitigations for the
[[PUSH-API]] being used to run silent background tasks.

# Observing User Presence # {#api}

## Model ## {#api-model}

This specification defines a model for user presence on two dimensions: idle
state and screen lock.

### The {{UserIdleState}} enum ### {#api-useridlestate}

<xmp class="idl">
enum UserIdleState {
    "active",
    "idle"
};
</xmp>

: {{"active"}}

::  Indicates that the user has interacted with the device in the last
    {{IdleOptions/threshold}} milliseconds.

: {{"idle"}}

::  Indicates that the user has no interacted with the device in at least
    {{IdleOptions/threshold}} milliseconds.

### The {{ScreenIdleState}} enum ### {#api-screenidlestate}

<xmp class="idl">
enum ScreenIdleState {
    "locked",
    "unlocked"
};
</xmp>

: {{"locked"}}

::  Indicates that the device has engaged a screensaver or lock screen which
    prevents content from being seen or interacted with.

: {{"unlocked"}}

::  Indicates that the device is able to display content and be interacted with.

## Permissions ## {#api-permissions}

The <dfn for=PermissionName enum-value>"idle-detection"</dfn> [=powerful
feature=] is a [=boolean feature=].

## Permissions policy ## {#api-permissions-policy}

This specification defines a [=policy-controlled feature=] identified by the
string `"idle-detection"`. Its [=default allowlist=] is `["self"]`.

<div class="note">
The [=default allowlist=] of `["self"]` allows usage of this feature on
same-origin nested frames by default but prevents access by third-party content.

Third-party usage can be selectively enabled by adding the
`allow="idle-detection"` attribute to an {{iframe}} element:

<div class="example">
```html
<iframe src="https://example.com" allow="idle-detection"></iframe>
```
</div>

Alternatively, this feature can be disabled completely in first-party contexts
by specifying the permissions policy in an HTTP response header:

<div class="example">
```http
Permissions-Policy: idle-detection 'none'
```
</div>

See [[PERMISSIONS-POLICY]] for more details.
</div>

## The {{IdleDetector}} interface ## {#api-idledetector}

<xmp class="idl">
dictionary IdleOptions {
  [EnforceRange] unsigned long threshold;
  AbortSignal signal;
};

[
  SecureContext,
  Exposed=(Window,DedicatedWorker)
] interface IdleDetector : EventTarget {
  constructor();
  readonly attribute UserIdleState? userState;
  readonly attribute ScreenIdleState? screenState;
  attribute EventHandler onchange;
  Promise<void> start(optional IdleOptions options = {});
};
</xmp>

Instances of {{IdleDetector}} are created with the [=internal slots=] described
in the following table:

<table dfn-for=IdleDetector dfn-type=attribute>
  <tr>
    <th>[=Internal slot=]</th>
    <th>Initial value</th>
    <th>Description (non-normative)</th>
  </tr>
  <tr>
    <td><dfn>\[[state]]</dfn></th>
    <td>`"stopped"`</td>
    <td>Tracks the active state of the {{IdleDetector}}</td>
  </tr>
  <tr>
    <td><dfn>\[[threshold]]</dfn></th>
    <td>`undefined`</td>
    <td>The configured idle detection threshold</td>
  </tr>
</table>

### {{IdleDetector/userState}} attribute ### {#api-idledetector-userstate}

The <dfn attribute for=IdleDetector>userState</dfn> attribute MUST be
initialized to `null`.

<div algorithm="user becomes idle">

If |this|.{{[[state]]}} is `"started"`, |this|.{{userState}} is {{"active"}} and
the user has not interacted with the device in at least |this|.{{[[threshold]]}}
milliseconds, the [=user agent=] MUST [=queue a task=] to run the following
steps:

1.  Set |this|.{{userState}} to {{"idle"}}.
1.  [=Fire an event=] named {{"change"}} using the {{Event}} interface at
    |this|.

</div>

<div algorithm="user becomes active">

If |this|.{{[[state]]}} is `"started"`, |this|.{{userState}} is {{"idle"}} and
the user interacts with the device in, the [=user agent=] MUST [=queue a task=]
to run the following steps:

1.  Set |this|.{{userState}} to {{"active"}}.
1.  [=Fire an event=] named {{"change"}} using the {{Event}} interface at
    |this|.

</div>

### {{IdleDetector/screenState}} attribute ### {#api-idledetector-screenstate}

The <dfn attribute for=IdleDetector>screenState</dfn> attribute MUST be
initialized to `null`.

<div algorithm="screen locked">

If |this|.{{[[state]]}} is `"started"` and the device is locked by the user, an
automatic timeout or any other event, the [=user agent=] MUST [=queue a task=] to
run the following steps:

1.  Set |this|.{{screenState}} to {{"locked"}}.
1.  [=Fire an event=] named {{"change"}} using the {{Event}} interface at
    |this|.

</div>

<div algorithm="screen unlocked">

If |this|.{{[[state]]}} is `"started"` and the device is unlocked by the user or
for any other reason, the [=user agent=] MUST [=queue a task=] to run the
following steps:

1.  Set |this|.{{screenState}} to {{"unlocked"}}.
1.  [=Fire an event=] named {{"change"}} using the {{Event}} interface at
    |this|.

</div>

### {{IdleDetector/onchange}} attribute ### {#api-idledetector-onchange}

<dfn attribute for="IdleDetector">onchange</dfn> is an <a>Event handler IDL
attribute</a> for the {{change}} event type.

### {{IdleDetector/start()}} method ### {#api-idledetector-start}

<div algorithm>

The <dfn method for=IdleDetector>start(|options|)</dfn> method, when invoked,
MUST run these steps:

1.  Let |result| be [=a new promise=].
1.  If the [=active document=] is not [=allowed to use=] the [=policy-controlled
    feature=] named `"idle-detection"` [=reject=] |result| with
    {{NotAllowedError}} and abort these steps.
1.  If |this|.{{IdleDetector/[[state]]}} is not `"stopped"`, [=reject=] |result|
    with {{InvalidStateError}} and return |result|.
1.  Set |this|.{{IdleDetector/[[state]]}} to `"starting"`.
1.  If |options|.{{threshold}} is less than 60,000 [=reject=] |result| with
    {{TypeError}} and abort these steps.
1.  If |options|.{{signal}} is present, then perform the following sub-steps:
    1.  If |options|.{{signal}}'s [=AbortSignal/aborted flag=] is set, then
        [=reject=] |result| with {{AbortError}} and return |result|.
    1.  [=AbortSignal/add|Add the following abort steps=] to
        |options|.{{signal}}:
        1. Set |this|.{{IdleDetector/[[state]]}} to `"stopped"`.
        1. [=Reject=] |result| with {{AbortError}}.
1.  [=Queue a task=] to perform the following steps, but [=abort when=]
    |this|.{{IdleDetector/[[state]]}} becomes `"stopped"`.
    1.  Let |permissionState| be the [=permission state=] the [=powerful
        feature=] named `"idle-detection"`.
    1.  If |permissionState| is `"denied"`, [=reject=] |result| with
        {{NotAllowedError}}, set |this|.{{IdleDetector/[[state]]}} to
        `"stopped"` and abort these steps.
    1.  Set |this|.{{IdleDetector/[[state]]}} to `"started"`.
    1.  Set |this|.{{IdleDetector/[[threshold]]}} to |options|.{{threshold}}.
    1.  [=Resolve=] |result|.
1.  Return |result|.

</div>

<div class="example">

The availability of this API can be detected by looking for the {{IdleDetector}}
constructor in the {{Window}} object.

```js
if (!('IdleDetector' in window)) {
  console.log('Idle detection is not available.');
  return;
}
```

Calling {{start()}} will fail if the {{"idle-detection"}} permission has not
been granted. The {{Permissions/query()}} method can be used to check if the
permission must be requested first.

```js
if ((await navigator.permissions.query({name: 'notifications'})).state !== 'granted') {
  console.log('Notifications permission not granted.');
  return
}
```

A set of options can be configured to control the threshold the [=user agent=]
uses to decide when the user has become idle.

```js
const controller = new AbortController();
const signal = controller.signal;

const options = {
  threshold: 60_000,
  signal,
};
```

The {{IdleDetector}} can now be created and started. An listener for the
{{"change"}} event is added and will be fired if the {{userState}} or
{{screenState}} attributes change.

```js
try {
  const idleDetector = new IdleDetector();
  idleDetector.addEventListener('change', () => {
    console.log(\`Idle change: ${idleDetector.userState}, ${idleDetector.screenState}.\`);
  });
  await idleDetector.start(options);
  console.log('IdleDetector is active.');
} catch (err) {
  // Deal with initialization errors like permission denied,
  // running outside of top-level frame, etc.
  console.error(err.name, err.message);
}
```

At a later time the page can cancel its interest in state change events by
removing its event listeners or using the {{AbortSignal}} that was passed to
{{start()}}.

```js
controller.abort();
console.log('IdleDetector is stopped.');
```
</div>

# Security and Privacy Considerations # {#security-and-privacy}

*This section is non-normative.*

This interface exposes the state of global system properties and so care must be
taken to prevent them from being used as cross-origin communication or
identification channels. Similar concerns are present in specifications such as
[[DEVICE-ORIENTATION]] and [[GEOLOCATION-API]], which mitigate them by requiring
a visible or focused context. This prevents multiple origins from observing the
global state at the same time. These mitigations are unfortunately inappropriate
here because the intent of this specification is precisely to allow a limited
form of tracking in blurred and hidden contexts.

To reduce the number of independent contexts with access to this interface this
specification restricts it to top-level and same-origin contexts. Access can be
delegated to a cross-origin context through [[PERMISSIONS-POLICY]].

To further reduce the number of contexts, as well as mitigate the general
concern that this interface can be used to build a profile of when and for how
long the user typically interacts with their device, this specification requires
a page to obtain the {{"idle-detection"}} permission. User agents should inform
the user of the capability that this permission grants and encourage them to
only grant it to trusted sites which have a legitimate purpose for this data.

While this interface does not provide details of the user interaction which
triggered an {{"idle"}} to {{"active"}} transition, with a sufficiently short
threshold these events could be used to detect behavior such as typing. This
specification therefore restricts the requested threshold to a minimum of at
least 60 seconds.

Implementations that provide a "private browsing" mode should not allow this
capability in contexts where this mode is enabled. Implementations should be
careful however to avoid the lack of this capability from being used as a signal
that this mode is enabled. This can be accomplished by refusing to allow the
{{"idle-detection"}} permission to be granted but delaying the automatic
dismissal of the permission request by a random interval so that it appears to
have been a user action.  

# Acknowledgements # {#acknowledgements}

*This section is non-normative.*

Many thanks to
Samuel Goto,
Ayu Ishii and 
Thomas Steiner
for their help in crafting this proposal.